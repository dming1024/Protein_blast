BiocManager::install("msa")
library(msa)
system.file("tex", "texshade.sty", package="msa")
mySequenceFile <- system.file("examples", "exampleAA.fasta", package="msa")
mySequenceFile
mySequences <- readAAStringSet(mySequenceFile)
mySequences
#run the clustalW
myFirstAlignment <- msa(mySequences)
myFirstAlignment
#输出pretty的结果
msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
showNames="none", showLogo="none", askForOverwrite=FALSE)
#输出pretty的结果
msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
texi2pdf("myFirstAlignment.tex", clean=TRUE)
texi2dvi("myFirstAlignment.tex", clean=TRUE)
system.file("tex", "texshade.sty", package="msa")
#输出pretty的结果
msaPrettyPrint(myFirstAlignment, output="pdf", showNames="none",
showLogo="none", askForOverwrite=FALSE, verbose=FALSE)
tools::texi2pdf("myFirstAlignment.tex",clean = T)
system.file("tex", "texshade.sty", package="msa")
tools::texi2pdf("myFirstAlignment.tex",clean = T)
tools::texi2pdf("myFirstAlignment.tex",clean = T)
tools::texi2pdf("myFirstAlignment.tex",clean = T)
msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
showNames="none", showLogo="none", askForOverwrite=FALSE)
myFirstAlignment
#Phylogenetic Tree
hemoAln2 <- msaConvert(myFirstAlignment, type="seqinr::alignment")
hemoAln2
library(seqinr)
BiocManager::install("seqinr")
library(seqinr)
d <- dist.alignment(hemoAln2, "identity")
library(ape)
hemoTree <- nj(d)
plot(hemoTree, main="Phylogenetic Tree of Hemoglobin Alpha Sequences")
#对alignment结果进行优化
msaPrettyPrint(myFirstAlignment, output="asis", y=c(164, 213),
subset=c(1:6), showNames="none", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
#对alignment结果进行优化
msaPrettyPrint(myFirstAlignment, output="pdf", y=c(164, 213),
subset=c(1:6), showNames=T, showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
#对alignment结果进行优化
msaPrettyPrint(myFirstAlignment, output="pdf", y=c(164, 213),
subset=c(1:6), showNames="left", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
tools::texi2pdf("myFirstAlignment.tex",clean = T)
tools::texi2pdf("myFirstAlignment.tex",clean = T)
#对alignment结果进行优化
msaPrettyPrint(myFirstAlignment, output="pdf",
subset=c(1:6), showNames="left", showLogo="top",
logoColors="rasmol", shadingMode="similar",
showLegend=FALSE, askForOverwrite=FALSE)
tools::texi2pdf("myFirstAlignment.tex",clean = T)
msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
showNames="none", showLogo="none", askForOverwrite=FALSE)
myFirstAlignment
getwd()
#output为asis在knitr中显示
msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
showNames="none", showLogo="none", askForOverwrite=FALSE)
knitr::opts_chunk$set(echo=TRUE, error=FALSE)
knitr::opts_chunk$set(out.width="100%", fig.height = 4.5, split=FALSE, fig.align = 'default')
options(dplyr.summarise.inform = FALSE)
msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
showNames="none", showLogo="none", askForOverwrite=FALSE)
msaPrettyPrint(myFirstAlignment, y=c(164, 213), output="asis",
file = "C:/Users/fan_qiangqiang/AppData/Local/Temp/RtmpYNyeQi/seq2984664608e.fasta",
showNames="none", showLogo="none", askForOverwrite=FALSE)
plot(cars)
getwd()
#MSH分析
#将4个物种的2个基因，放在一个里面进行blast
mySequenceFile_both <- "msh.fasta"
mySequences_both <- readAAStringSet(mySequenceFile_both)
#multiple blast of proteins
#包含有多条蛋白氨基酸序列的fasta文件
library(msa)
mySequences_both <- readAAStringSet(mySequenceFile_both)
#run the clustalW
myFirstAlignment_both<- msa(mySequences_both)
#输出pretty的结果
msaPrettyPrint(myFirstAlignment_both, output="pdf", file="result_msh.pdf",
showNames="left", shadingMode="identical",
showLogo = "none",consensusColor="ColdHot",
#shadingModeArg = "standard area",
furtherCode = c("\\showruler{1}{top}"),
showLegend=FALSE, askForOverwrite=FALSE)
tools::texi2pdf("result_msh.tex",clean = T)
#输出MSH domain区域
msaPrettyPrint(myFirstAlignment_both, output="pdf", file="resultHAT_msh.pdf",
showNames="left", showLogo="top",y=c(500, 700),
logoColors="rasmol", shadingMode="identical",
#shadingModeArg = "standard area",
showLegend=FALSE, askForOverwrite=FALSE)
tools::texi2pdf("resultHAT_msh.tex",clean = T)
system.file("tex", "texshade.sty", package="msa")
knitr::opts_chunk$set(echo = TRUE)
msh_df=readxl::read_xlsx("msh.xlsx",sheet = "Sheet1")
knitr::kable(msh_df)
#
#Phylogenetic Tree
hemoAln2 <- msaConvert(myFirstAlignment_both, type="seqinr::alignment")
library(seqinr)
d <- dist.alignment(hemoAln2, "identity")
library(ape)
hemoTree <- nj(d)
pdf("phylogenetic_of_msh.pdf")
plot(hemoTree, main="Phylogenetic Tree of MSH6")
dev.off()
readAAStringSet
library(httr)
my_protein_ids <- c('Q8N4C6', 'Q9UM73')
results <- POST(url = "https://www.uniprot.org/uploadlists/",
body = list(from = 'ID',
to = 'GENENAME',
format = 'tab',
query = paste(my_protein_ids, collapse = ' ')))
uniprot_results <- content(results, type = 'text/tab-separated-values',
col_names = TRUE,
col_types = NULL,
encoding = "UTF-8")
uniprot_results
?select
results <- POST(url = "https://rest.uniprot.org/idmapping/run",
body = list(from = 'ID',
to = 'GENENAME',
format = 'tab',
query = paste(my_protein_ids, collapse = ' ')))
uniprot_results <- content(results, type = 'text/tab-separated-values',
col_names = TRUE,
col_types = NULL,
encoding = "UTF-8")
results
my_protein_ids <- c('TP53')
results <- POST(url = "https://rest.uniprot.org/idmapping/run",
body = list(from = 'ID',
to = 'GENENAME',
format = 'tab',
query = paste(my_protein_ids, collapse = ' ')))
results
uniprot_results <- content(results, type = 'text/tab-separated-values',
col_names = TRUE,
col_types = NULL,
encoding = "UTF-8")
my_protein_ids <- c('TP53')
results <- POST(url = "https://rest.uniprot.org/idmapping/run",
body = list(from = 'GENENAME',
to = 'ID',
format = 'tab',
query = paste(my_protein_ids, collapse = ' ')))
results
uniprot_results <- content(results, type = 'text/tab-separated-values',
col_names = TRUE,
col_types = NULL,
encoding = "UTF-8")
library('org.Hs.eg')
annotation.col1 <- select(org.Hs.eg.db, keys=c('Q7TNF6','Q53XJ8','P05787','P0CG48','Q96CG1','D3DR86','Q96FS5'),
cols=c('UNIPROT', 'SYMBOL', 'ENTREZID'), keytype="UNIPROT")
library(org.Hs.eg.db)
library('org.Hs.eg.db')
annotation.col1 <- select(org.Hs.eg.db, keys=c('Q7TNF6','Q53XJ8','P05787','P0CG48','Q96CG1','D3DR86','Q96FS5'),
cols=c('UNIPROT', 'SYMBOL', 'ENTREZID'), keytype="UNIPROT")
annotation.col1 <- select(org.Hs.eg.db,
keys=c('Q7TNF6','Q53XJ8','P05787','P0CG48','Q96CG1','D3DR86','Q96FS5'),
columns=c('UNIPROT', 'SYMBOL', 'ENTREZID'), keytype="UNIPROT")
annotation.col1
annotation.col1 <- select(org.Hs.eg.db,
keys=c('TP53'),
columns=c('UNIPROT', 'SYMBOL', 'ENTREZID'), keytype="SYMBOL")
annotation <- select(org.Hs.eg.db,
keys=c('TP53'),
columns=c('UNIPROT', 'SYMBOL', 'ENTREZID'), keytype="SYMBOL")
annotation
library('org.Hs.eg.db')
annotation <- select(org.Hs.eg.db,
keys=c('PMM2'),
columns=c('UNIPROT', 'SYMBOL', 'ENTREZID'), keytype="SYMBOL")
annotation
gs=c("PMM2","NEB","CDS1","SENP6")
library('org.Hs.eg.db')
annotation <- select(org.Hs.eg.db,
keys=gs,
columns=c('UNIPROT', 'SYMBOL', 'ENTREZID'), keytype="SYMBOL")
annotation
install.packages("UniprotR")
install.packages("alakazam",dependencies = T)
install.packages("UniprotR",dependencies = T)
install.packages("C:/Users/fan_qiangqiang/Downloads/alakazam_1.0.2.tar.gz", repos = NULL, type = "source")
install.packages("UniprotR",dependencies = T)
library(UniprotR)
Accessions <-GetAccessionList("https://s3.amazonaws.com/csvpastebin/uploads/9571fa356c67a0c7c95e8431799a051a/Accessions.csv")
Accessions
TaxaObj <- GetNamesTaxa(Accessions)
TaxaObj
PlotChromosomeInfo(TaxaObj)
?ConvertID
ConvertID(Accessions,ID_from = "ACC+ID" , ID_to = "Gene Name")
GETSeqFastaUniprot(Accessions[1],FilePath = NULL, FileName = NULL)
GETSeqFastaUniprot(Accessions[1],FilePath = "./", FileName = "abc.fa")
getwd()
Accessions[1]
